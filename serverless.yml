service: python-offline-demo

plugins:
  - serverless-localstack

provider:
  name: aws
  runtime: python3.11
  region: us-east-1
  stage: ${opt:stage, 'offline'}
  environment:
    DYNAMODB_TABLE: main-table-${self:provider.stage}
    DYNAMODB_ENDPOINT: ${self:custom.endpoints.dynamodb.${self:provider.stage}, ''}

custom:
  localstack:
    stages:
      - offline
  endpoints:
    dynamodb:
      offline: http://localhost:4566

functions:
  createItem:
    handler: handler.create_item
    runtime: ${self:provider.runtime}
    events:
      - httpApi:
          path: /create-item
          method: post

  queueHandler:
    handler: handler.queue_handler
    runtime: ${self:provider.runtime}
    events:
      - sqs:
          arn:
            Fn::GetAtt: [MainQueue, Arn]

  s3Handler:
    handler: handler.s3_handler
    runtime: ${self:provider.runtime}
    events:
      - s3:
          bucket: main-bucket-${self:provider.stage}
          event: s3:ObjectCreated:*
          existing: true

resources:
  Resources:
    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: main-table-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    MainQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: main-queue-${self:provider.stage}

    MainBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: main-bucket-${self:provider.stage}
